{
  plugins: [
    '@stylistic/ts',
    'no-relative-import-paths',
  ],
  overrides: [
    // TypeScript - all files
    {
      files: ['*.ts'],
      plugins: [
        'import',
        'typescript-sort-keys',
      ],
      settings: {
        'import/parsers': {
          '@typescript-eslint/parser': [
            '.ts',
            '.tsx',
          ],
        },
        'import/ignore': ['node_modules'],
        'import/resolver': {
          typescript: {
            alwaysTryTypes: true,
          },
        },
      },
      // @see available eslint rules: https://eslint.org/docs/v8.x/rules/
      // @see available typescript rules: https://typescript-eslint.io/rules/
      // @see available stylistic-ts rules: https://eslint.style/packages/ts
      extends: [
        // @see https://github.com/eslint/eslint/blob/v8.57.0/packages/js/src/configs/eslint-recommended.js
        'eslint:recommended',
        // @see https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/src/configs/recommended.ts
        'plugin:@typescript-eslint/recommended',
        // Type checking may be time consuming
        // @see https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/src/configs/recommended-type-checked.ts
        'plugin:@typescript-eslint/recommended-type-checked',
        // @see https://github.com/benmosher/eslint-plugin-import/blob/master/config/errors.js
        'plugin:import/errors',
        // @see https://github.com/benmosher/eslint-plugin-import/blob/master/config/warnings.js
        'plugin:import/warnings',
        // @see https://github.com/benmosher/eslint-plugin-import/blob/master/config/typescript.js
        'plugin:import/typescript',
      ],
      parserOptions: {
        createDefaultProgram: true,
      },
      rules: {
        '@stylistic/ts/brace-style': [
          'off', // Conflicts with Prettier
        ],
        '@stylistic/ts/comma-dangle': [
          'off',
        ],
        '@stylistic/ts/lines-between-class-members': [
          'error',
          {
            enforce: [
              { blankLine: 'always', prev: '*', next: 'method' },
            ],
          },
        ],
        '@stylistic/ts/padding-line-between-statements': [
          'error',
          { blankLine: 'always', prev: '*', next: 'class' },
          { blankLine: 'always', prev: '*', next: 'function' },
          { blankLine: 'always', prev: '*', next: 'interface' },
          { blankLine: 'always', prev: '*', next: 'return' },
          { blankLine: 'always', prev: '*', next: 'type' },
        ],
        '@stylistic/ts/quotes': [
          'error',
          'single',
          {
            allowTemplateLiterals: true,
            avoidEscape: true,
          },
        ],
        '@stylistic/ts/semi': [
          'off', // Must be off to avoid conflicts with "@typescript-eslint/semi"
        ],
        '@stylistic/ts/space-before-blocks': [
          'error',
          'always',
        ],
        '@stylistic/ts/space-before-function-paren': [
          'off', // Conflicts with Prettier
        ],
        '@stylistic/ts/space-infix-ops': ['error'],
        '@typescript-eslint/no-unsafe-argument': ['error'],
        '@typescript-eslint/explicit-function-return-type': ['error'],
        '@typescript-eslint/explicit-member-accessibility': [
          'error',
          {
            accessibility: 'explicit',
            overrides: {
              accessors: 'explicit',
              constructors: 'no-public',
              methods: 'explicit',
              properties: 'explicit',
              parameterProperties: 'explicit',
            },
          },
        ],
        '@typescript-eslint/member-ordering': [
          'error',
          {
            default: [
              'signature',
              'call-signature',
              'static-field',
              'static-initialization',
              [
                'field',
                'get',
                'set',
              ],
              'constructor',
              [
                'private-method',
                'protected-method',
                'public-method',
              ],
              'method',
            ],
          },
        ],
        '@typescript-eslint/method-signature-style': [
          'error',
          'property',
        ],
        '@typescript-eslint/naming-convention': [
          'error',
          {
            selector: 'variableLike',
            format: ['camelCase'],
          },
          {
            selector: 'enum',
            format: ['PascalCase'],
          },
          {
            selector: 'interface',
            format: ['PascalCase'],
          },
          {
            selector: 'parameter',
            format: ['camelCase'],
            leadingUnderscore: 'forbid',
          },
          {
            selector: 'variable',
            types: ['boolean'],
            format: ['PascalCase'],
            prefix: [
              'cached',
              'can',
              'could',
              'did',
              'does',
              'expected',
              'has',
              'have',
              'is',
              'should',
              'was',
              'will',
            ],
          },
          {
            selector: 'typeLike',
            format: ['PascalCase'],
          },
          {
            selector: [
              'classProperty',
              'objectLiteralProperty',
              'typeProperty',
              'classMethod',
              'objectLiteralMethod',
              'typeMethod',
              'accessor',
              'enumMember',
            ],
            format: null,
            modifiers: ['requiresQuotes'],
          },
        ],
        '@typescript-eslint/adjacent-overload-signatures': ['error'],
        '@typescript-eslint/array-type': [
          'error',
          {
            default: 'array',
          },
        ],
        '@typescript-eslint/class-literal-property-style': ['error'],
        '@typescript-eslint/consistent-indexed-object-style': [
          'error',
          'index-signature',
        ],
        '@typescript-eslint/consistent-type-assertions': [
          'error',
          {
            assertionStyle: 'never',
          },
        ],
        '@typescript-eslint/default-param-last': ['error'],
        '@typescript-eslint/no-array-delete': ['error'],
        '@typescript-eslint/no-confusing-non-null-assertion': ['error'],
        '@typescript-eslint/no-confusing-void-expression': ['error'],
        '@typescript-eslint/no-dynamic-delete': ['error'],
        '@typescript-eslint/no-empty-interface': [
          'error',
          {
            allowSingleExtends: true,
          },
        ],
        '@typescript-eslint/no-extraneous-class': [
          'error',
          {
            allowConstructorOnly: true,
            allowWithDecorator: true,
          },
        ],
        '@typescript-eslint/no-invalid-this': ['error'],
        '@typescript-eslint/no-invalid-void-type': ['error'],
        '@typescript-eslint/no-loop-func': ['error'],
        '@typescript-eslint/no-magic-numbers': [
          'warn',
          {
            ignore: [
              -1,
              0,
              1,
            ],
            ignoreArrayIndexes: true,
            ignoreDefaultValues: true,
            ignoreClassFieldInitialValues: true,
          },
        ],
        '@typescript-eslint/no-non-null-assertion': ['error'],
        '@typescript-eslint/no-shadow': ['error'],
        '@typescript-eslint/no-unsafe-assignment': ['error'],
        '@typescript-eslint/unbound-method': [
          'error',
          {
            ignoreStatic: true,
          },
        ],
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': ['error'],
        '@typescript-eslint/no-unnecessary-condition': ['error'],
        '@typescript-eslint/no-useless-constructor': ['error'],
        '@typescript-eslint/no-unnecessary-template-expression': ['error'],
        '@typescript-eslint/no-unused-vars': [
          'error',
          {
            argsIgnorePattern: '^_',
          },
        ],
        '@typescript-eslint/prefer-destructuring': [
          'error',
          {
            array: true,
            object: true,
          },
          {
            enforceForDeclarationWithTypeAnnotation: false,
          },
        ],
        '@typescript-eslint/prefer-enum-initializers': ['error'],
        '@typescript-eslint/prefer-find': ['error'],
        '@typescript-eslint/prefer-for-of': ['error'],
        '@typescript-eslint/prefer-includes': ['error'],
        '@typescript-eslint/prefer-literal-enum-member': ['error'],
        '@typescript-eslint/prefer-nullish-coalescing': ['error'],
        '@typescript-eslint/prefer-optional-chain': ['error'],
        '@typescript-eslint/prefer-string-starts-ends-with': ['error'],
        '@typescript-eslint/strict-boolean-expressions': ['error'],
        '@typescript-eslint/switch-exhaustiveness-check': ['error'],
        '@typescript-eslint/unified-signatures': ['error'],
        'array-bracket-newline': [
          'error',
          'consistent',
        ],
        'array-bracket-spacing': [
          'error',
          'never',
        ],
        'array-element-newline': [
          'error',
          'consistent',
        ],
        'arrow-parens': [
          'error',
          'always',
        ],
        'arrow-spacing': [
          'error',
          {
            after: true,
            before: true,
          },
        ],
        'computed-property-spacing': [
          'error',
          'never',
        ],
        'object-curly-spacing': [
          'error',
          'always',
        ],
        'eol-last': [
          'error',
          'always',
        ],
        'eqeqeq': ['error'],
        'function-call-argument-newline': [
          'error',
          'consistent',
        ],
        'grouped-accessor-pairs': ['error'],
        'import/export': 'warn',
        'import/named': 'warn',
        'import/namespace': 'warn',
        'import/no-named-as-default': 'off',
        'import/no-unresolved': 'off',
        'import/order': [
          'off', // Covered by Prettier
        ],
        'max-len': [
          'off', // Conflicts with Prettier
        ],
        'no-confusing-arrow': ['error'],
        'no-console': ['off'],
        'no-duplicate-imports': ['error'],
        'no-else-return': ['error'],
        'no-implicit-coercion': [
          'error',
          {
            boolean: false, // allow usage of !!
          },
        ],
        'no-invalid-this': ['off'],
        'no-lonely-if': ['error'],
        'no-multi-spaces': [
          'error',
          {
            exceptions: {
              ImportDeclaration: true,
              Property: true,
              VariableDeclarator: true,
            },
            ignoreEOLComments: true,
          },
        ],
        'no-multiple-empty-lines': [
          'error',
          {
            max: 1,
            maxEOF: 1,
          },
        ],
        'no-relative-import-paths/no-relative-import-paths': [
          'error',
        ],
        'no-restricted-globals': [
          'error',
          {
            name: 'fdescribe',
            message: 'Do not commit fdescribe. Use describe instead.',
          },
          {
            name: 'fit',
            message: 'Do not commit fit. Use describe instead.',
          },
        ],
        'no-self-compare': ['error'],
        // Off due to false positive in Typescript. @typescript-eslint/no-shadow is used instead
        'no-shadow': 'off',
        'no-unneeded-ternary': ['error'],
        // Disabled to avoid conflict with "@typescript-eslint/no-unused-vars"
        'no-unused-vars': ['off'],
        'no-useless-computed-key': ['error'],
        'no-useless-rename': ['error'],
        'no-var': ['error'],
        'no-whitespace-before-property': ['error'],
        'object-curly-newline': [
          'error',
          {
            consistent: true,
          },
        ],
        'prefer-arrow-callback': ['error'],
        'radix': ['error'],
        'require-await': ['error'],
        'rest-spread-spacing': [
          'error',
          'never',
        ],
        'sort-keys': 'error',
        'space-in-parens': [
          'error',
          'never',
        ],
        'space-unary-ops': [
          'error',
          {
            nonwords: false,
            words: true,
          },
        ],
        'spaced-comment': [
          'error',
          'always',
          {
            exceptions: [
              '-',
              '+',
              '*',
            ],
            markers: ['/'],
          },
        ],
        'switch-colon-spacing': ['error'],
        'typescript-sort-keys/interface': 'error',
        'typescript-sort-keys/string-enum': 'error',
      },
    },
  ],
}
